{"version":3,"file":"linesBeforeBlock.cjs","names":["_iterateJsdoc","_interopRequireDefault","require","e","__esModule","default","startPunctuators","Set","_default","exports","iterateJsdoc","context","jsdocNode","sourceCode","report","utils","_tokenBefore$loc","_jsdocNode$loc","checkBlockStarts","lines","ignoreSameLine","excludedTags","options","hasATag","tokensBefore","getTokensBefore","includeComments","tokenBefore","at","type","has","value","loc","end","line","start","_jsdocNode$loc2","_tokenBefore$loc2","startLine","sameLine","fix","fixer","indent","_jsdocNode$loc3","_tokenBefore$loc3","_jsdocNode$value$matc","spaceDiff","column","match","slice","tokenPrior","startColumn","_tokenPrior","_tokenPrior$loc","pop","repeat","insertTextAfter","iterateAllJsdocs","meta","fixable","docs","description","url","schema","additionalProperties","properties","items","module"],"sources":["../../src/rules/linesBeforeBlock.js"],"sourcesContent":["import iterateJsdoc from '../iterateJsdoc.js';\n\n/**\n * Punctuators that begin a logical group should not require a line before it skipped. Specifically\n * `[` starts an array, `{` starts an object or block, `(` starts a grouping, and `=` starts a\n * declaration (like a variable or a type alias).\n */\nconst startPunctuators = new Set(['[', '{', '(', '=']);\n\nexport default iterateJsdoc(({\n  context,\n  jsdocNode,\n  sourceCode,\n  report,\n  utils,\n}) => {\n  const {\n    checkBlockStarts,\n    lines = 1,\n    ignoreSameLine = true,\n    excludedTags = ['type']\n  } = context.options[0] || {};\n\n  if (utils.hasATag(excludedTags)) {\n    return;\n  }\n\n  const tokensBefore = sourceCode.getTokensBefore(jsdocNode, {includeComments: true});\n  const tokenBefore = tokensBefore.at(-1);\n  if (\n    !tokenBefore || (\n      tokenBefore.type === 'Punctuator' &&\n      !checkBlockStarts &&\n      startPunctuators.has(tokenBefore.value)\n    )\n  ) {\n    return;\n  }\n\n  if (tokenBefore.loc?.end?.line + lines >=\n    /** @type {number} */\n      (jsdocNode.loc?.start?.line)\n    ) {\n    const startLine = jsdocNode.loc?.start?.line;\n    const sameLine = tokenBefore.loc?.end?.line === startLine;\n\n    if (sameLine && ignoreSameLine) {\n      return;\n    }\n\n    /** @type {import('eslint').Rule.ReportFixer} */\n    const fix = (fixer) => {\n      let indent = '';\n      if (sameLine) {\n        const spaceDiff = /** @type {number} */ (jsdocNode.loc?.start?.column) -\n          /** @type {number} */ (tokenBefore.loc?.end?.column);\n        // @ts-expect-error Should be a comment\n        indent = /** @type {import('estree').Comment} */ (\n          jsdocNode\n        ).value.match(/^\\*\\n([ \\t]*) \\*/)?.[1]?.slice(spaceDiff);\n        if (!indent) {\n          /** @type {import('eslint').AST.Token|import('estree').Comment|undefined} */\n          let tokenPrior = tokenBefore;\n          let startColumn;\n          while (tokenPrior && tokenPrior?.loc?.start?.line === startLine) {\n            startColumn = tokenPrior.loc?.start?.column;\n            tokenPrior = tokensBefore.pop();\n          }\n          indent = ' '.repeat(\n            /* c8 ignore next */\n            /** @type {number} */ (startColumn ? startColumn - 1 : 0)\n          );\n        }\n      }\n\n      return fixer.insertTextAfter(\n        /** @type {import('eslint').AST.Token} */\n        (tokenBefore),\n        '\\n'.repeat(lines) +\n        (sameLine ? '\\n' + indent : '')\n      );\n    };\n    report(`Required ${lines} line(s) before JSDoc block`, fix);\n  }\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    fixable: 'code',\n    docs: {\n      description: 'Enforces minimum number of newlines before JSDoc comment blocks',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/lines-before-block.md#repos-sticky-header',\n    },\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          checkBlockStarts: {\n            type: 'boolean',\n          },\n          excludedTags: {\n            type: 'array',\n            items: {\n              type: 'string'\n            }\n          },\n          ignoreSameLine: {\n            type: 'boolean',\n          },\n          lines: {\n            type: 'integer'\n          }\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"mappings":"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","ignoreList":[]}